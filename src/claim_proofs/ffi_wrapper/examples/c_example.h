#ifndef claim_proofs_ffi_h
#define claim_proofs_ffi_h

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

typedef struct ScopeClaimProofData ScopeClaimProofData;

typedef struct CDDClaimData CDDClaimData;

typedef struct ScopeClaimData ScopeClaimData;

typedef struct Scalar Scalar;

typedef struct RistrettoPoint RistrettoPoint;

typedef struct Signature Signature;

typedef struct ProofPublicKey ProofPublicKey;

/**
 * Creates a `ScopeClaimProofData` object from a CDD claim and an scope claim.
 *
 * SAFETY: Caller is responsible to make sure `cdd_claim` and `scope_claim`
 *         pointers are not Null.
 * Caller is responsible for deallocating memory after use.
 */
ScopeClaimProofData *build_scope_claim_proof_data_wrapper(const CDDClaimData *cdd_claim,
                                                          const ScopeClaimData *scope_claim);

/**
 * Deallocates a `CDDClaimData` object's memory.
 */
void cdd_claim_data_free(CDDClaimData *ptr);

/**
 * Create a new `CDDClaimData` object.
 *
 * Caller is responsible for calling `cdd_claim_data_free()` to deallocate this object.
 * SAFETY: Caller is also responsible for making sure the `investor_did` and
 *         `investor_unique_id` pointers are not Null.
 */
CDDClaimData *cdd_claim_data_new(Scalar *investor_did, Scalar *investor_unique_id);

/**
 * Creates a CDD ID from a CDD claim.
 *
 * SAFETY: Caller is responsible to make sure `cdd_claim` pointer is not Null.
 * Caller is responsible for deallocating memory after use.
 */
RistrettoPoint *compute_cdd_id_wrapper(const CDDClaimData *cdd_claim);

/**
 * Creates a scope ID from a scope claim.
 *
 * SAFETY: Caller is responsible to make sure the `scope_claim` pointer is not Null.
 * Caller is responsible for deallocating memory after use.
 */
RistrettoPoint *compute_scope_id_wrapper(const ScopeClaimData *scope_claim);

/**
 * Creates a `Signature` from a scope claim proof data and a message.
 *
 * SAFETY: Caller is responsible to make sure `scope_claim_proof_data` and `message`
 *         pointers are not Null, and `message` points to a block of memory that has
 *         at least `message_size` bytes.
 * Caller is responsible for deallocating memory after use.
 */
Signature *generate_id_match_proof_wrapper(ScopeClaimProofData *scope_claim_proof_data,
                                           const uint8_t *message,
                                           size_t message_size);

/**
 * Deallocates a `ProofPublicKey` object's memory.
 */
void proof_public_key_free(ProofPublicKey *ptr);

/**
 * Create a new `ProofPublicKey` object.
 *
 * Caller is responsible for calling `cdd_claim_data_free()` to deallocate this object.
 * SAFETY: Caller is also responsible for making sure the `cdd_id`, `investor_did`,
 *         `scope_id`, and `scope_did` pointers are not Null.
 */
ProofPublicKey *proof_public_key_new(RistrettoPoint *cdd_id,
                                     Scalar *investor_did,
                                     RistrettoPoint *scope_id,
                                     Scalar *scope_did);

/**
 * Deallocates a `Scalar` object's memory.
 */
void scalar_free(Scalar *ptr);

/**
 * Create a `Scalar` object from a 32 bytes array.
 *
 * Caller is responsible for calling `scalar_free()` to deallocate this object.
 * SAFETY: Caller is also responsible for making sure the `scalar_bits` pointer
 *         is not Null and points to a 32 bytes block of memory.
 */
Scalar *scalar_new(const uint8_t *scalar_bits);

/**
 * Deallocates a `ScopeClaimData` object's memory.
 */
void scope_claim_data_free(ScopeClaimData *ptr);

/**
 * Create a new `ScopeClaimData` object.
 *
 * Caller is responsible for calling `scope_claim_data_free()` to deallocate this object.
 * SAFETY: Caller is also responsible for making sure the `scope_did` and
 *         `investor_unique_id` pointers are not Null.
 */
ScopeClaimData *scope_claim_data_new(Scalar *scope_did, Scalar *investor_unique_id);

/**
 * Deallocates a `ScopeClaimProofData` object's memory.
 */
void scope_claim_proof_data_free(ScopeClaimProofData *ptr);

/**
 * Deallocates a `Signature` object's memory.
 */
void signature_free(Signature *ptr);

/**
 * Verifies the signature on a message.
 *
 * SAFETY: Caller is responsible to make sure `proof_public_key`, `message`, and `signature`
 *         pointers are not Null, and `message` points to a block of memory that has
 *         at least `message_size` bytes.
 * Caller is responsible for deallocating memory after use.
 */
bool verify_id_match_proof_wrapper(const ProofPublicKey *proof_public_key,
                                   const uint8_t *message,
                                   size_t message_size,
                                   const Signature *signature);

#endif /* claim_proofs_ffi_h */
