#ifndef private_identity_audit_ffi_h
#define private_identity_audit_ffi_h

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

/**
 * The data needed to generate a CDD ID.
 */
typedef struct CddClaimData CddClaimData;

typedef struct SingleEncoding {
  uint8_t *arr;
  uintptr_t n;
} SingleEncoding;

typedef struct ArrEncoding {
  struct SingleEncoding *arr;
  uintptr_t n;
} ArrEncoding;

typedef struct ProverResults {
  struct ArrEncoding *prover_initial_messages;
  struct ArrEncoding *prover_final_responses;
  struct SingleEncoding *committed_uids;
} ProverResults;

typedef struct VerifierSetGeneratorResults {
  struct SingleEncoding *verifier_secrets;
  struct SingleEncoding *committed_uids;
} VerifierSetGeneratorResults;

void bbb(struct ArrEncoding _a, struct SingleEncoding _b);

/**
 * Create a new `CddClaimData` object.
 *
 * Caller is responsible for calling `cdd_claim_data_free()` to deallocate this object.
 *
 * # Safety
 * Caller is also responsible for making sure `investor_did` and
 * `investor_unique_id` point to allocated blocks of memory of `investor_did_size`
 * and `investor_unique_id_size` bytes respectively.
 */
struct CddClaimData *cdd_claim_data_new(const uint8_t *investor_did,
                                        size_t investor_did_size,
                                        const uint8_t *investor_unique_id,
                                        size_t investor_unique_id_size);

/**
 * Creates a `InitialProverResults` object from a CDD claim and a seed.
 *
 *
 * # Safety
 * Caller is responsible to make sure `cdd_claim` is a valid
 * pointer to a `CddClaimData` object, and `seed` is a random
 * 32-byte array.
 * Caller is responsible for deallocating memory after use.
 */
struct ProverResults *generate_proofs(const struct ArrEncoding *cdd_claims,
                                      const struct SingleEncoding *committed_uids,
                                      const uint8_t *seed,
                                      size_t seed_size);

/**
 * Creates a `VerifierSetGeneratorResults` object from a private Uuid (as
 * a Scalar object), a minimum set size, and a seed.
 *
 * # Safety
 * Caller is responsible to make sure `private_unique_identifiers`
 * is a valid pointer to a `Scalar` object, and `seed` is a random
 * 32-byte array.
 * Caller is responsible for deallocating memory after use.
 */
struct VerifierSetGeneratorResults *generate_committed_set(struct ArrEncoding *private_unique_identifiers,
                                                           const size_t *min_set_size,
                                                           const uint8_t *seed,
                                                           size_t seed_size);

/**
 * Verifies the proof of a Uuid's membership in a set of Uuids.
 *
 * # Safety
 * Caller is responsible to make sure `initial_message`,
 * `final_response`, `challenge`, `cdd_id`, `verifier_secrets`,
 * and `re_committed_uids` pointers are valid objects, created by
 * this API.
 * Caller is responsible for deallocating memory after use.
 */
bool verify_proofs(const struct ArrEncoding *initial_messages,
                   const struct ArrEncoding *final_responses,
                   const struct ArrEncoding *cdd_ids,
                   const struct SingleEncoding *verifier_secrets,
                   const struct SingleEncoding *re_committed_uids);

#endif /* private_identity_audit_ffi_h */
