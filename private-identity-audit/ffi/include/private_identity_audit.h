#ifndef private_identity_audit_ffi_h
#define private_identity_audit_ffi_h

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

/**
 * The data needed to generate a CDD ID.
 */
typedef struct CddClaimData CddClaimData;

typedef struct CddId CddId;

/**
 * The committed and padded version of the private set of PUIS.
 */
typedef struct CommittedUids CommittedUids;

typedef struct Scalar Scalar;

/**
 * Holds PUIS secret data.
 */
typedef struct VerifierSecrets VerifierSecrets;

/**
 * Holds the CDD Provider's response to the PUIS challenge.
 */
typedef struct ZKPFinalResponse ZKPFinalResponse;

/**
 * Holds the initial messages in the Zero-Knowledge Proofs sent by CDD Provider.
 */
typedef struct ZKPInitialmessage ZKPInitialmessage;

typedef struct VerifierSetGeneratorResults {
  VerifierSecrets *verifier_secrets;
  CommittedUids *committed_uids;
} VerifierSetGeneratorResults;

typedef struct ArrZKPInitialmessage {
  ZKPInitialmessage *arr;
  uintptr_t n;
  uintptr_t cap;
} ArrZKPInitialmessage;

typedef struct ArrZKPFinalResponse {
  ZKPFinalResponse *arr;
  uintptr_t n;
  uintptr_t cap;
} ArrZKPFinalResponse;

typedef struct ProverResults {
  struct ArrZKPInitialmessage *prover_initial_messages;
  struct ArrZKPFinalResponse *prover_final_responses;
  CommittedUids *committed_uids;
} ProverResults;

typedef struct ArrCddClaimData {
  CddClaimData *arr;
  uintptr_t n;
  uintptr_t cap;
} ArrCddClaimData;

typedef struct ArrCddId {
  CddId *arr;
  uintptr_t n;
  uintptr_t cap;
} ArrCddId;

/**
 * Convert a Uuid byte array into a scalar object.
 *
 * Caller is responsible for calling `cdd_claim_data_free()` to deallocate this object.
 *
 * # Safety
 * Caller is also responsible for making sure `investor_did` and
 * `investor_unique_id` point to allocated blocks of memory of `investor_did_size`
 * and `investor_unique_id_size` bytes respectively.
 */
struct Scalar *uuid_new(const uint8_t *unique_id, size_t unique_id_size);

struct Scalar *uuid_new2(const uint8_t *unique_id, size_t unique_id_size);

/**
 * Deallocates a `Scalar` object's memory.
 *
 * Should only be called on a still-valid pointer to an object returned by
 * `uuid_new()`.
 */
void scalar_free(struct Scalar *ptr);

/**
 * Create a new `CddClaimData` object.
 *
 * Caller is responsible for calling `cdd_claim_data_free()` to deallocate this object.
 *
 * # Safety
 * Caller is also responsible for making sure `investor_did` and
 * `investor_unique_id` point to allocated blocks of memory of `investor_did_size`
 * and `investor_unique_id_size` bytes respectively.
 */
CddClaimData *cdd_claim_data_new(const uint8_t *investor_did,
                                 size_t investor_did_size,
                                 const uint8_t *investor_unique_id,
                                 size_t investor_unique_id_size);

/**
 * Deallocates a `CddClaimData` object's memory.
 *
 * Should only be called on a still-valid pointer to an object returned by
 * `cdd_claim_data_new()`.
 */
void cdd_claim_data_free(CddClaimData *ptr);

/**
 * Deallocates a `VerifierSetGeneratorResults` object's memory.
 *
 * Should only be called on a still-valid pointer to an object returned by
 * `generate_committed_set()`.
 */
void verifier_set_generator_results_free(struct VerifierSetGeneratorResults *ptr);

/**
 * Deallocates a `ProverResults` object's memory.
 *
 * Should only be called on a still-valid pointer to an object returned by
 * `generate_proofs()`.
 */
void prover_results_free(struct ProverResults *ptr);

/**
 * Deallocates a `TODO` object's memory.
 *
 * Should only be called on a still-valid pointer to an object returned by
 * `TODO()`.
 * TODO: Do the same for the other arrays as well.
 */
void todo(struct ArrZKPInitialmessage *ptr);

/**
 * Creates a `InitialProverResults` object from a CDD claim and a seed.
 *
 *
 * # Safety
 * Caller is responsible to make sure `cdd_claim` is a valid
 * pointer to a `CddClaimData` object, and `seed` is a random
 * 32-byte array.
 * Caller is responsible for deallocating memory after use.
 */
struct ProverResults *generate_proofs(const struct ArrCddClaimData *cdd_claims,
                                      const CommittedUids *committed_uids,
                                      const uint8_t *seed,
                                      size_t seed_size);

/**
 * Creates a `VerifierSetGeneratorResults` object from a private Uuid (as
 * a Scalar object), a minimum set size, and a seed.
 *
 * # Safety
 * Caller is responsible to make sure `private_unique_identifiers`
 * is a valid pointer to a `Scalar` object, and `seed` is a random
 * 32-byte array.
 * Caller is responsible for deallocating memory after use.
 */
struct VerifierSetGeneratorResults *generate_committed_set(struct Scalar *private_unique_identifiers,
                                                           size_t private_unique_identifiers_size,
                                                           const size_t *min_set_size,
                                                           const uint8_t *seed,
                                                           size_t seed_size);

/**
 * Verifies the proof of a Uuid's membership in a set of Uuids.
 *
 * # Safety
 * Caller is responsible to make sure `initial_message`,
 * `final_response`, `challenge`, `cdd_id`, `verifier_secrets`,
 * and `re_committed_uids` pointers are valid objects, created by
 * this API.
 * Caller is responsible for deallocating memory after use.
 */
bool verify_proofs(const struct ArrZKPInitialmessage *initial_messages,
                   const struct ArrZKPFinalResponse *final_responses,
                   const struct ArrCddId *cdd_ids,
                   const VerifierSecrets *verifier_secrets,
                   const CommittedUids *re_committed_uids);

#endif /* private_identity_audit_ffi_h */
