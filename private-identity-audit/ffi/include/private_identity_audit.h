#ifndef private_identity_audit_ffi_h
#define private_identity_audit_ffi_h

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

/**
 * The data needed to generate a CDD ID.
 */
typedef struct CddClaimData CddClaimData;

typedef struct CddId CddId;

/**
 * Used to pass a Vec of u8 between Rust and FFI users.
 * The code assumes that the pointer `ptr` is the start a "continous" block of memory of size `n`.
 */
typedef struct VecEncoding {
  uint8_t *ptr;
  uintptr_t n;
} VecEncoding;

/**
 * Holds the result of the first phase of the protocol. The `verifier_secrets` should be kept
 * private, while the `committed_uids` should be shared with the prover.
 */
typedef struct VerifierSetGeneratorResults {
  struct VecEncoding verifier_secrets;
  struct VecEncoding committed_uids;
} VerifierSetGeneratorResults;

/**
 * Used to pass a 2D Vec of u8 between Rust and FFI users.
 * The code assumes that the pointer `ptr` is the start a "continous" block of memory of size `rows*cols`.
 */
typedef struct MatrixEncoding {
  uint8_t *ptr;
  uintptr_t rows;
  uintptr_t cols;
} MatrixEncoding;

/**
 * Holds the result of the second phase of the protocol. All the messages should be shared with
 * the verifier.
 */
typedef struct ProverResults {
  struct MatrixEncoding prover_initial_messages;
  struct MatrixEncoding prover_final_responses;
  struct VecEncoding committed_uids;
} ProverResults;

/**
 * Used to pass a Vec of `CddClaimData` between Rust and FFI users.
 * The code assumes that the pointer `ptr` is the start a "continous" block of memory of size
 * `n * length of the encoded version of CddClaimData`.
 */
typedef struct ArrCddClaimData {
  struct CddClaimData *ptr;
  uintptr_t n;
} ArrCddClaimData;

/**
 * Used to pass a Vec of `ArrCddId` between Rust and FFI users.
 * The code assumes that the pointer `ptr` is the start a "continous" block of memory of size
 * `n * length of the encoded version of ArrCddId`.
 */
typedef struct ArrCddId {
  struct CddId *ptr;
  uintptr_t n;
} ArrCddId;

/**
 * Create a new `CddClaimData` object.
 *
 * Caller is responsible for calling `cdd_claim_data_free()` to deallocate this object.
 *
 * # Safety
 * Caller is also responsible for making sure `investor_did` and
 * `investor_unique_id` point to allocated blocks of memory of `investor_did_size`
 * and `investor_unique_id_size` bytes respectively.
 */
struct CddClaimData *cdd_claim_data_new(const uint8_t *investor_did,
                                        size_t investor_did_size,
                                        const uint8_t *investor_unique_id,
                                        size_t investor_unique_id_size);

/**
 * Deallocates a `CddClaimData` object's memory.
 *
 * Should only be called on a still-valid pointer to an object returned by
 * `cdd_claim_data_new()`.
 */
void cdd_claim_data_free(struct CddClaimData *ptr);

/**
 * Deallocates a `VerifierSetGeneratorResults` object's memory.
 *
 * Should only be called on a still-valid pointer to an object returned by
 * `generate_committed_set()`.
 */
void verifier_set_generator_results_free(struct VerifierSetGeneratorResults *ptr);

/**
 * Deallocates a `ProverResults` object's memory.
 *
 * Should only be called on a still-valid pointer to an object returned by
 * `generate_proofs()`.
 */
void prover_results_free(struct ProverResults *ptr);

/**
 * Creates a `InitialProverResults` object from a CDD claim and a seed.
 *
 *
 * # Safety
 * Caller is responsible to make sure `cdd_claim` is a valid
 * pointer to a `CddClaimData` object, and `seed` is a random
 * 32-byte array.
 * Caller is responsible for deallocating memory after use.
 */
struct ProverResults *generate_proofs(struct ArrCddClaimData cdd_claims,
                                      struct VecEncoding committed_uids,
                                      const uint8_t *seed,
                                      size_t seed_size);

/**
 * Creates a `VerifierSetGeneratorResults` object from a private Uuid (as
 * a Scalar object), a minimum set size, and a seed.
 *
 * # Safety
 * Caller is responsible to make sure `private_unique_identifiers`
 * is a valid pointer to a `MatrixEncoding` object, and `seed` is a random
 * 32-byte array.
 * Caller is responsible for deallocating memory after use.
 */
struct VerifierSetGeneratorResults *generate_committed_set(struct MatrixEncoding private_unique_identifiers,
                                                           const size_t *min_set_size,
                                                           const uint8_t *seed,
                                                           size_t seed_size);

/**
 * Verifies the proof of a Uuid's membership in a set of Uuids.
 *
 * # Safety
 * Caller is responsible to make sure `initial_message`,
 * `final_response`, `cdd_ids`, `verifier_secrets`,
 * and `re_committed_uids` pointers are valid objects, created by
 * this API.
 * Caller is responsible for deallocating memory after use.
 */
bool verify_proofs(struct MatrixEncoding initial_messages,
                   struct MatrixEncoding final_responses,
                   struct ArrCddId cdd_ids,
                   struct VecEncoding verifier_secrets,
                   struct VecEncoding re_committed_uids);

#endif /* private_identity_audit_ffi_h */
